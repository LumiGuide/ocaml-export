// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Aeson_decode = require("bs-aeson/src/Aeson_decode.js");
var Aeson_encode = require("bs-aeson/src/Aeson_encode.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function encodeEntity(encodeKey, encodeValue, entity) {
  return Aeson_encode.object_(/* :: */[
              /* tuple */[
                "key",
                Curry._1(encodeKey, entity[/* entityKey */0])
              ],
              /* :: */[
                /* tuple */[
                  "value",
                  Curry._1(encodeValue, entity[/* entityValue */1])
                ],
                /* [] */0
              ]
            ]);
}

function decodeEntity(decodeKey, decodeValue, json) {
  var exit = 0;
  var v;
  try {
    v = /* record */[
      /* entityKey */Aeson_decode.field("key", (function (a) {
              return Aeson_decode.unwrapResult(Curry._1(decodeKey, a));
            }), json),
      /* entityValue */Aeson_decode.field("value", (function (a) {
              return Aeson_decode.unwrapResult(Curry._1(decodeValue, a));
            }), json)
    ];
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Aeson_decode.DecodeError) {
      return /* Error */Block.__(1, ["decodeEntity: " + exn[1]]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Ok */Block.__(0, [v]);
  }
  
}

function encodeKey(x) {
  return x[0];
}

function decodeKey(json) {
  var exit = 0;
  var v;
  try {
    v = Aeson_decode.$$int(json);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Aeson_decode.DecodeError) {
      return /* Error */Block.__(1, ["decodeKey: " + exn[1]]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Ok */Block.__(0, [/* Key */[v]]);
  }
  
}

function encodeTodoId(x) {
  return x[0][0];
}

function decodeTodoId(json) {
  var exit = 0;
  var v;
  try {
    v = Aeson_decode.unwrapResult(decodeKey(json));
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Aeson_decode.DecodeError) {
      return /* Error */Block.__(1, ["decodeTodoId: " + exn[1]]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Ok */Block.__(0, [/* TodoId */[v]]);
  }
  
}

function encodeUserId(x) {
  return x[0][0];
}

function decodeUserId(json) {
  var exit = 0;
  var v;
  try {
    v = Aeson_decode.unwrapResult(decodeKey(json));
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Aeson_decode.DecodeError) {
      return /* Error */Block.__(1, ["decodeUserId: " + exn[1]]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Ok */Block.__(0, [/* UserId */[v]]);
  }
  
}

function encodeUsername(x) {
  return x[0];
}

function decodeUsername(json) {
  var exit = 0;
  var v;
  try {
    v = Aeson_decode.string(json);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Aeson_decode.DecodeError) {
      return /* Error */Block.__(1, ["decodeUsername: " + exn[1]]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Ok */Block.__(0, [/* Username */[v]]);
  }
  
}

function encodeTodo(x) {
  return Aeson_encode.object_(/* :: */[
              /* tuple */[
                "description",
                x[/* description */0]
              ],
              /* :: */[
                /* tuple */[
                  "completed",
                  x[/* completed */1]
                ],
                /* [] */0
              ]
            ]);
}

function decodeTodo(json) {
  var exit = 0;
  var v;
  try {
    v = /* record */[
      /* description */Aeson_decode.field("description", Aeson_decode.string, json),
      /* completed */Aeson_decode.field("completed", Aeson_decode.bool, json)
    ];
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Aeson_decode.DecodeError) {
      return /* Error */Block.__(1, ["decodeTodo: " + exn[1]]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Ok */Block.__(0, [v]);
  }
  
}

function encodeUser(x) {
  return Aeson_encode.object_(/* :: */[
              /* tuple */[
                "username",
                x[/* username */0][0]
              ],
              /* :: */[
                /* tuple */[
                  "password",
                  x[/* password */1]
                ],
                /* [] */0
              ]
            ]);
}

function decodeUser(json) {
  var exit = 0;
  var v;
  try {
    v = /* record */[
      /* username */Aeson_decode.field("username", (function (a) {
              return Aeson_decode.unwrapResult(decodeUsername(a));
            }), json),
      /* password */Aeson_decode.field("password", Aeson_decode.string, json)
    ];
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Aeson_decode.DecodeError) {
      return /* Error */Block.__(1, ["decodeUser: " + exn[1]]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Ok */Block.__(0, [v]);
  }
  
}

exports.encodeEntity = encodeEntity;
exports.decodeEntity = decodeEntity;
exports.encodeKey = encodeKey;
exports.decodeKey = decodeKey;
exports.encodeTodoId = encodeTodoId;
exports.decodeTodoId = decodeTodoId;
exports.encodeUserId = encodeUserId;
exports.decodeUserId = decodeUserId;
exports.encodeUsername = encodeUsername;
exports.decodeUsername = decodeUsername;
exports.encodeTodo = encodeTodo;
exports.decodeTodo = decodeTodo;
exports.encodeUser = encodeUser;
exports.decodeUser = decodeUser;
/* No side effect */
