// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Aeson_decode = require("bs-aeson/src/Aeson_decode.js");
var SharedTypes$Frontend = require("./Exported/SharedTypes.js");

function userIdToInt(userId) {
  return userId[0][0];
}

function MakeServerFetch(Config) {
  var toRoute = function (route) {
    var base = Config[/* baseUrl */0];
    var urlPath;
    urlPath = typeof route === "number" ? "user" : (
        route.tag ? Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "/todo/",
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "/todo/%d"
                  ]), route[0][0][0]) : Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "/todos/",
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "/todos/%d"
                  ]), route[0][0][0])
      );
    return base + urlPath;
  };
  var postUserTodo = function (userId, todo) {
    var url = toRoute(/* TodoR */Block.__(0, [userId]));
    var headers = /* array */[/* tuple */[
        "Accept",
        "application/json"
      ]];
    var body = JSON.stringify(SharedTypes$Frontend.encodeTodo(todo));
    return fetch(url, Fetch.RequestInit[/* make */0](/* Post */2, Caml_option.some(headers), Caml_option.some(body), undefined, undefined, undefined, /* Include */2, undefined, undefined, undefined, undefined)(/* () */0)).then((function (prim) {
                    return prim.json();
                  })).then((function (json) {
                  return Promise.resolve(SharedTypes$Frontend.decodeEntity(SharedTypes$Frontend.decodeTodoId, SharedTypes$Frontend.decodeTodo, json));
                }));
  };
  var getUserTodos = function (userId) {
    var url = toRoute(/* TodosR */Block.__(1, [userId]));
    var headers = /* array */[/* tuple */[
        "Accept",
        "application/json"
      ]];
    return fetch(url, Fetch.RequestInit[/* make */0](/* Get */0, Caml_option.some(headers), undefined, undefined, undefined, undefined, /* Include */2, undefined, undefined, undefined, undefined)(/* () */0)).then((function (prim) {
                    return prim.json();
                  })).then((function (json) {
                  return Promise.resolve(Aeson_decode.array((function (param) {
                                    return SharedTypes$Frontend.decodeEntity(SharedTypes$Frontend.decodeTodoId, SharedTypes$Frontend.decodeTodo, param);
                                  }), json));
                }));
  };
  var postUser = function (user) {
    var url = toRoute(/* UserR */0);
    var headers = /* array */[/* tuple */[
        "Accept",
        "application/json"
      ]];
    var body = JSON.stringify(SharedTypes$Frontend.encodeUser(user));
    return fetch(url, Fetch.RequestInit[/* make */0](/* Post */2, Caml_option.some(headers), Caml_option.some(body), undefined, undefined, undefined, /* Include */2, undefined, undefined, undefined, undefined)(/* () */0)).then((function (prim) {
                    return prim.json();
                  })).then((function (json) {
                  return Promise.resolve(SharedTypes$Frontend.decodeEntity(SharedTypes$Frontend.decodeUserId, SharedTypes$Frontend.decodeUser, json));
                }));
  };
  return /* module */[
          /* toRoute */toRoute,
          /* postUserTodo */postUserTodo,
          /* getUserTodos */getUserTodos,
          /* postUser */postUser
        ];
}

exports.userIdToInt = userIdToInt;
exports.MakeServerFetch = MakeServerFetch;
/* No side effect */
